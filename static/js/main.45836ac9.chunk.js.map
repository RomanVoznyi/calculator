{"version":3,"sources":["components/Display/Display.js","helpers/constants.js","components/Buttons/buttonsList.js","components/Buttons/Buttons.js","handlers/digit.js","handlers/comma.js","handlers/registr.js","handlers/percent.js","handlers/action.js","handlers/memory.js","App.js","index.js"],"names":["Display","inputNumb","expression","useState","inputStyle","setInputStyle","expressionStyle","setExpressionStyle","expressionText","numbOne","action","numbTwo","equal","createExpressionText","inputText","baseText","split","integer","fraction","newInteger","reverse","join","replace","trim","includes","convertInputToLocal","useEffect","tempStyle","length","className","TYPES","INITIAL_VALUE","buttonsList","id","display","type","value","Buttons","onClick","window","addEventListener","handleClick","removeEventListener","evt","currentTarget","dataset","classList","add","key","pressedBtn","find","el","document","querySelector","removeClass","remove","map","onTransitionEnd","data-type","data-value","notifyOptions","position","style","width","margin","checkDigitsLimit","text","slice","indexOf","digit","state","setInputNumb","setExpression","toast","warning","prevState","comma","registr","checkComma","percent","calculate","firstNumber","secondNumber","setNumberFormat","checkPercentAndComma","Number","toFixed","number","toPrecision","tempResult","error","checkPercent","memory","storage","setStorage","success","info","App","reset","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"oQAiEeA,EA9DC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAAiB,EACTC,mBAAS,IADA,mBACtCC,EADsC,KAC1BC,EAD0B,OAECF,mBAAS,IAFV,mBAEtCG,EAFsC,KAErBC,EAFqB,KAIvCC,EA+BN,YAAoE,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MACxD,MAAM,GAAN,OAAUH,EAAV,YAAqBC,EAArB,YAA+BC,EAA/B,YAA0CC,GAhCrBC,CAAqBX,GACtCY,EAkCN,SAA6BC,GAAW,IAAD,EACJA,EAASC,MAAM,KADX,mBAC9BC,EAD8B,YACrBC,OADqB,MACV,GADU,EAE/BC,EAAaF,EAChBD,MAAM,IACNI,UACAC,KAAK,IACLC,QAAQ,WAAY,OACpBC,OACAP,MAAM,IACNI,UACAC,KAAK,IAER,OAAON,EAASS,SAAS,KAAlB,UAA4BL,EAA5B,YAA0CD,GAAaC,EA9C9CM,CAAoBxB,GAiDtC,OA/CAyB,qBAAU,WACR,IAAIC,EAAY,YACVC,EAASd,EAAUc,OAErBA,EAAS,GAAKA,GAAU,KAC1BD,GAAa,WAEXC,EAAS,IAAMA,GAAU,KAC3BD,GAAa,UAEXC,EAAS,KACXD,GAAa,eAEftB,EAAcsB,KACb,CAACb,IAEJY,qBAAU,WACR,IAAIC,EAAY,aACVC,EAASpB,EAAeoB,OAC1BA,EAAS,IAAMA,GAAU,KAC3BD,GAAa,UAEXC,EAAS,KACXD,GAAa,eAEfpB,EAAmBoB,KAClB,CAACnB,IAsBF,sBAAKqB,UAAU,UAAf,UACE,mBAAGA,UAAWvB,EAAd,SAAgCE,IAChC,mBAAGqB,UAAWzB,EAAd,SAA2BU,QC5D3BgB,EACG,QADHA,EAEK,UAFLA,EAGK,UAHLA,EAII,SAJJA,EAKI,SALJA,EAMG,QANHA,EAOG,QAGHC,EACO,IADPA,EAEQ,CACVtB,QAAS,GACTC,OAAQ,GACRC,QAAS,GACTC,MAAO,IANLmB,EAQK,GCUIC,EA1BK,CAClB,CAAEC,GAAI,IAAKC,QAAS,KAAMC,KAAML,EAAaM,MAAON,GACpD,CAAEG,GAAI,IAAKC,QAAS,MAAOC,KAAML,EAAeM,MAAO,KACvD,CAAEH,GAAI,IAAKC,QAAS,IAAKC,KAAML,EAAeM,MAAO,KACrD,CAAEH,GAAI,IAAKC,QAAQ,OAAWC,KAAML,EAAcM,MAAO,KACzD,CAAEH,GAAI,IAAKC,QAAS,KAAMC,KAAML,EAAcM,MAAO,YACrD,CAAEH,GAAI,IAAKC,QAAS,KAAMC,KAAML,EAAcM,MAAO,aACrD,CAAEH,GAAI,IAAKC,QAAS,KAAMC,KAAML,EAAcM,MAAO,YACrD,CAAEH,GAAI,IAAKC,QAAS,KAAMC,KAAML,EAAcM,MAAO,WACrD,CAAEH,GAAI,IAAKC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACnD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAQ,OAAWC,KAAML,EAAcM,MAAO,KAC1D,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAQ,SAAWC,KAAML,EAAcM,MAAO,KAC1D,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAcM,MAAO,KACrD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAaM,MAAO,KACpD,CAAEH,GAAI,KAAMC,QAAQ,SAAWC,KAAML,EAAaM,MAAO,KACzD,CAAEH,GAAI,KAAMC,QAAS,IAAKC,KAAML,EAAcM,MAAO,MCoDxCC,G,MAxEC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjBZ,qBAAU,WAER,OADAa,OAAOC,iBAAiB,UAAWC,GAC5B,WACLF,OAAOG,oBAAoB,UAAWD,OAI1C,IAAMA,EAAc,SAACE,GACnB,IAAIR,EACAC,EAQJ,GAPiB,UAAbO,EAAIR,OACNA,EAAOQ,EAAIC,cAAcC,QAAlB,KACPT,EAAQO,EAAIC,cAAcC,QAAlB,MACRF,EAAIC,cAAcE,UAAUC,IAAI,UAEhCT,EAAQH,EAAMC,IAEC,YAAbO,EAAIR,KAAoB,CAC1B,IAAIa,EACJ,OAAQL,EAAIK,KACV,IAAK,QACHA,EAAM,IACN,MACF,IAAK,IACHA,EAAM,IACN,MACF,IAAK,SACHA,EAAM,QACN,MACF,QACEA,EAAML,EAAIK,IAId,IAAMC,EAAajB,EAAYkB,MAAK,SAACC,GAAD,OAAQA,EAAGf,QAAUY,KACzD,GAAIC,EAEFd,EAAiB,OADjBC,EAAQa,EAAWb,OACIN,EAAemB,EAAWd,KAEtCiB,SAASC,cAAT,sBACMlB,EADN,0BAC4BC,EAD5B,OAGRU,UAAUC,IAAI,UAEjBT,EAAQH,EAAMC,KAKdkB,EAAc,SAACX,GACnBA,EAAIC,cAAcE,UAAUS,OAAO,WAGrC,OACE,oBAAI1B,UAAU,cAAd,SACGG,EAAYwB,KAAI,SAACL,GAAD,OACf,oBACEtB,UAAU,cAEVS,QAASG,EACTgB,gBAAiBH,EACjBI,YAAWP,EAAGhB,KACdwB,aAAYR,EAAGf,MANjB,SAQE,+BAAOe,EAAGjB,WANLiB,EAAGlB,W,OC7DZ2B,EAAgB,CACpBC,SAAU,gBACVC,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAyB7BC,EAAmB,SAACC,GAAqB,IAAf/B,EAAc,uDAAP,GACrC,OAAIA,IAASL,EACJoC,EAAK1C,SAAS,MAAQ0C,EAAKC,MAAMD,EAAKE,QAAQ,KAAO,GAAGxC,OAAS,EAEnEsC,EAAKtC,OAAS,IAGRyC,EA7BD,SAACjC,EAAOkC,GAAW,IACvBrE,EAAuDqE,EAAvDrE,UAAWsE,EAA4CD,EAA5CC,aAAcrE,EAA8BoE,EAA9BpE,WAAYsE,EAAkBF,EAAlBE,cAExCvE,EAAUuB,SAAS,OACJ,UAAdvB,GAAyBC,EAAWU,OACtC2D,EAAanC,GACboC,EAAczC,IACLkC,EAAiBhE,EAAW,SACrCwE,IAAMC,QAAQ,qCAAsCd,GAC3CK,EAAiBhE,EAAW6B,GACrC2C,IAAMC,QACJ,qDACAd,GAGFW,GAAa,SAACI,GAAD,MACG,MAAdA,EAAoBvC,EAAQuC,EAAYvC,OCLjCwC,EAjBD,SAACxC,EAAOkC,GAAW,IACvBrE,EAAuDqE,EAAvDrE,UAAWsE,EAA4CD,EAA5CC,aAAcrE,EAA8BoE,EAA9BpE,WAAYsE,EAAkBF,EAAlBE,cAG3CvE,EAAU2B,OAAS,KAClB3B,EAAUuB,SAASY,KACnBnC,EAAUuB,SAAS,OAEF,UAAdvB,GAAyBC,EAAWU,OACtC2D,EAAa,IAAD,OAAKnC,IACjBoC,EAAczC,IAEdwC,GAAa,SAACI,GAAD,OAAeA,EAAYvC,OCJ/ByC,EAVC,SAACzC,EAAOkC,GAAW,IACzBrE,EAA4BqE,EAA5BrE,UAAWsE,EAAiBD,EAAjBC,aAEftE,EAAU2B,OAAS,IAAoB,MAAd3B,GAAmC,UAAdA,GAChDsE,GAAa,SAACI,GAAD,OACXA,EAAUnD,SAASY,GAASuC,EAAUR,MAAM,GAAK/B,EAAQuC,MCOzDG,EAAa,SAACZ,GAClB,MAA8B,MAA1BA,EAAKA,EAAKtC,OAAS,GACdsC,EAAKC,MAAM,EAAGD,EAAKtC,OAAS,GAE9BsC,GAGMa,EAnBC,SAAC3C,EAAOkC,GAAW,IACzBrE,EAA4BqE,EAA5BrE,UAAWsE,EAAiBD,EAAjBC,aAGjBtE,EAAU2B,OAAS,IACL,UAAd3B,IACCA,EAAUuB,SAASY,IAEpBmC,GAAa,SAACI,GAAD,OAAeG,EAAWH,GAAavC,M,OCLlDwB,EAAgB,CACpBC,SAAU,gBACVC,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAmD7BgB,EAAY,SAACC,EAAavE,EAAQwE,GACtC,OAAQxE,GACN,IAAK,IACH,OAAOyE,EAAgBF,EAAcC,GACvC,IAAK,IACH,OAAOC,EAAgBF,EAAcC,GACvC,IAAK,IACH,OAAOC,EAAgBF,EAAcC,GACvC,IAAK,IACH,OAAwB,IAAjBA,EACHC,EAAgBF,EAAcC,GAC9B,QACN,QACE,MAAO,UAIPE,EAAuB,SAAClB,GAC5B,OAAIA,EAAK1C,SAAS,MACR6D,OAAOnB,EAAKC,MAAM,EAAGD,EAAKtC,OAAS,IAAM,KAC9C0D,QAAQ,IACRhE,QAAQ,SAAU,IAEO,MAA1B4C,EAAKA,EAAKtC,OAAS,GACdsC,EAAKC,MAAM,EAAGD,EAAKtC,OAAS,GAE9BsC,GAGHiB,EAAkB,SAACI,GACvB,OACEA,EAAS,MACTA,GAAU,MACTA,EAAS,GAAKA,EAAS,OACvBA,GAAU,OAASA,EAAS,EAEtBA,EAAOC,YAAY,IAEnBD,EAAOD,QAAQ,IAAIhE,QAAQ,SAAU,KAIjCZ,EA1FA,SAAC0B,EAAOkC,GAAW,IACxBrE,EAAuDqE,EAAvDrE,UAAWsE,EAA4CD,EAA5CC,aAAcrE,EAA8BoE,EAA9BpE,WAAYsE,EAAkBF,EAAlBE,cAE7C,GAAkB,UAAdvE,MAEEC,EAAWQ,QAAoB,MAAV0B,GACtBlC,EAAWU,OAAmB,MAAVwB,KAErBoC,EAAc,CACZ/D,QAAS2E,EAAqBnF,GAC9BS,OAAQ0B,EACRzB,QAAS,GACTC,MAAO,KAET2D,EAAa,MAEXrE,EAAWO,SAAWP,EAAWQ,SAAWR,EAAWU,OAAO,CAChE,IAAM6E,EAAaT,EACjBK,OAAOnF,EAAWO,SAClBP,EAAWQ,OACX2E,OAAOD,EAAqBnF,KAEX,UAAfwF,GACFhB,IAAMiB,MAAM,mBAAoB9B,GAChCW,EAAakB,GACbjB,EAAczC,IAEA,MAAVK,GACFoC,GAAc,SAACG,GAAD,mBAAC,eACVA,GADS,IAEZhE,QAASV,EACTW,MAAO,SAET2D,EAAakB,KAEbjB,EAAc,CACZ/D,QAASgF,EACT/E,OAAQ0B,EACRzB,QAAS,GACTC,MAAO,KAET2D,EAAa,QC/CjBX,EAAgB,CACpBC,SAAU,gBACVC,MAAO,CAAEC,MAAO,QAASC,OAAQ,WA+B7B2B,EAAe,SAACzB,GACpB,OAAOA,EAAK1C,SAAS,MAChB6D,OAAOnB,EAAKC,MAAM,EAAGD,EAAKtC,OAAS,IAAM,KACvC0D,QAAQ,IACRhE,QAAQ,SAAU,IACrB4C,GAGAiB,EAAkB,SAACI,GACvB,OACEA,EAAS,MACTA,GAAU,MACTA,EAAS,GAAKA,EAAS,OACvBA,GAAU,OAASA,EAAS,EAEtBA,EAAOC,YAAY,IAEnBD,EAAOD,QAAQ,IAAIhE,QAAQ,SAAU,KAIjCsE,EAjDA,SAACxD,EAAOkC,GAAW,IACxBrE,EAAiDqE,EAAjDrE,UAAWsE,EAAsCD,EAAtCC,aAAcsB,EAAwBvB,EAAxBuB,QAASC,EAAexB,EAAfwB,WAE5B,aAAV1D,GACF0D,EAAW,IAGC,aAAV1D,GAAsC,UAAdnC,IAC1B6F,GAAW,SAACnB,GAAD,OACTQ,EAAgBE,OAAOV,GAAaU,OAAOM,EAAa1F,QAE1DwE,IAAMsB,QAAQ,QAASnC,IAGX,YAAVxB,GAAqC,UAAdnC,IACzB6F,GAAW,SAACnB,GAAD,OACTQ,EAAgBE,OAAOV,GAAaU,OAAOM,EAAa1F,QAE1DwE,IAAMsB,QAAQ,QAASnC,IAGX,cAAVxB,IACU,KAAZyD,EACIpB,IAAMuB,KAAK,gBAAiBpC,GAC5BW,EAAasB,KCoCNI,G,YAzDH,WAAO,IAAD,EACkB9F,mBAAS4B,GAD3B,mBACT9B,EADS,KACEsE,EADF,OAEoBpE,mBAAS4B,GAF7B,mBAET7B,EAFS,KAEGsE,EAFH,OAGcrE,mBAAS4B,GAHvB,mBAGT8D,EAHS,KAGAC,EAHA,KAyCVI,EAAQ,WACZ3B,EAAaxC,GACbyC,EAAczC,IAGhB,OACE,sBAAKF,UAAU,UAAf,UACE,cAAC,IAAD,CAAgBsE,UAAW,MAC3B,sBAAKtE,UAAU,aAAf,UACE,cAAC,EAAD,CAAS5B,UAAWA,EAAWC,WAAYA,IAC3C,cAAC,EAAD,CAASoC,QA9CK,SAACH,EAAMC,GACzB,IAAMkC,EAAQ,CACZrE,YACAsE,eACArE,aACAsE,gBACAqB,UACAC,cAGF,OAAQ3D,GACN,KAAKL,EACHuC,EAAMjC,EAAOkC,GACb,MACF,KAAKxC,EACH8C,EAAMxC,EAAOkC,GACb,MACF,KAAKxC,EACH+C,EAAQzC,EAAOkC,GACf,MACF,KAAKxC,EACHiD,EAAQ3C,EAAOkC,GACf,MACF,KAAKxC,EACHpB,EAAO0B,EAAOkC,GACd,MACF,KAAKxC,EACH8D,EAAOxD,EAAOkC,GACd,MAEF,QACE4B,gBCzCRE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASmD,eAAe,W","file":"static/js/main.45836ac9.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = ({ inputNumb, expression }) => {\r\n  const [inputStyle, setInputStyle] = useState(\"\");\r\n  const [expressionStyle, setExpressionStyle] = useState(\"\");\r\n\r\n  const expressionText = createExpressionText(expression);\r\n  const inputText = convertInputToLocal(inputNumb);\r\n\r\n  useEffect(() => {\r\n    let tempStyle = \"inputNumb\";\r\n    const length = inputText.length;\r\n\r\n    if (length > 7 && length <= 10) {\r\n      tempStyle += \" medium\";\r\n    }\r\n    if (length > 10 && length <= 18) {\r\n      tempStyle += \" small\";\r\n    }\r\n    if (length > 18) {\r\n      tempStyle += \" very-small\";\r\n    }\r\n    setInputStyle(tempStyle);\r\n  }, [inputText]);\r\n\r\n  useEffect(() => {\r\n    let tempStyle = \"expression\";\r\n    const length = expressionText.length;\r\n    if (length > 10 && length <= 20) {\r\n      tempStyle += \" small\";\r\n    }\r\n    if (length > 20) {\r\n      tempStyle += \" very-small\";\r\n    }\r\n    setExpressionStyle(tempStyle);\r\n  }, [expressionText]);\r\n\r\n  function createExpressionText({ numbOne, action, numbTwo, equal }) {\r\n    return `${numbOne} ${action} ${numbTwo} ${equal}`;\r\n  }\r\n\r\n  function convertInputToLocal(baseText) {\r\n    const [integer, fraction = \"\"] = baseText.split(\".\");\r\n    const newInteger = integer\r\n      .split(\"\")\r\n      .reverse()\r\n      .join(\"\")\r\n      .replace(/(\\d{3})/g, \"$1 \")\r\n      .trim()\r\n      .split(\"\")\r\n      .reverse()\r\n      .join(\"\");\r\n\r\n    return baseText.includes(\".\") ? `${newInteger},${fraction}` : newInteger;\r\n  }\r\n\r\n  return (\r\n    <div className=\"display\">\r\n      <p className={expressionStyle}>{expressionText}</p>\r\n      <p className={inputStyle}>{inputText}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","const TYPES = {\r\n  CLEAR: \"clear\",\r\n  REGISTR: \"registr\",\r\n  PERCENT: \"percent\",\r\n  ACTION: \"action\",\r\n  MEMORY: \"memory\",\r\n  DIGIT: \"digit\",\r\n  COMMA: \"comma\",\r\n};\r\n\r\nconst INITIAL_VALUE = {\r\n  inputNumb: \"0\",\r\n  expression: {\r\n    numbOne: \"\",\r\n    action: \"\",\r\n    numbTwo: \"\",\r\n    equal: \"\",\r\n  },\r\n  storage: \"\",\r\n};\r\n\r\nexport { TYPES, INITIAL_VALUE };\r\n","import { TYPES } from \"../../helpers/constants\";\r\n\r\nconst buttonsList = [\r\n  { id: \"1\", display: \"AC\", type: TYPES.CLEAR, value: TYPES.CLEAR },\r\n  { id: \"2\", display: \"+/-\", type: TYPES.REGISTR, value: \"-\" },\r\n  { id: \"3\", display: \"%\", type: TYPES.PERCENT, value: \"%\" },\r\n  { id: \"4\", display: `\\u00F7`, type: TYPES.ACTION, value: \"/\" },\r\n  { id: \"5\", display: \"mc\", type: TYPES.MEMORY, value: \"memClear\" },\r\n  { id: \"6\", display: \"mr\", type: TYPES.MEMORY, value: \"memReturn\" },\r\n  { id: \"7\", display: \"m-\", type: TYPES.MEMORY, value: \"memMinus\" },\r\n  { id: \"8\", display: \"m+\", type: TYPES.MEMORY, value: \"memPlus\" },\r\n  { id: \"9\", display: \"7\", type: TYPES.DIGIT, value: \"7\" },\r\n  { id: \"10\", display: \"8\", type: TYPES.DIGIT, value: \"8\" },\r\n  { id: \"11\", display: \"9\", type: TYPES.DIGIT, value: \"9\" },\r\n  { id: \"12\", display: `\\u00D7`, type: TYPES.ACTION, value: \"*\" },\r\n  { id: \"13\", display: \"4\", type: TYPES.DIGIT, value: \"4\" },\r\n  { id: \"14\", display: \"5\", type: TYPES.DIGIT, value: \"5\" },\r\n  { id: \"15\", display: \"6\", type: TYPES.DIGIT, value: \"6\" },\r\n  { id: \"16\", display: `\\u2212`, type: TYPES.ACTION, value: \"-\" },\r\n  { id: \"17\", display: \"1\", type: TYPES.DIGIT, value: \"1\" },\r\n  { id: \"18\", display: \"2\", type: TYPES.DIGIT, value: \"2\" },\r\n  { id: \"19\", display: \"3\", type: TYPES.DIGIT, value: \"3\" },\r\n  { id: \"20\", display: \"+\", type: TYPES.ACTION, value: \"+\" },\r\n  { id: \"21\", display: \"0\", type: TYPES.DIGIT, value: \"0\" },\r\n  { id: \"22\", display: `\\u0317`, type: TYPES.COMMA, value: \".\" },\r\n  { id: \"23\", display: \"=\", type: TYPES.ACTION, value: \"=\" },\r\n];\r\n\r\nexport default buttonsList;\r\n","import { useEffect } from \"react\";\r\nimport buttonsList from \"./buttonsList\";\r\nimport { TYPES } from \"../../helpers/constants\";\r\nimport \"./Buttons.css\";\r\n\r\nconst Buttons = ({ onClick }) => {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleClick);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleClick);\r\n    };\r\n  });\r\n\r\n  const handleClick = (evt) => {\r\n    let type;\r\n    let value;\r\n    if (evt.type === \"click\") {\r\n      type = evt.currentTarget.dataset[\"type\"];\r\n      value = evt.currentTarget.dataset[\"value\"];\r\n      evt.currentTarget.classList.add(\"active\");\r\n\r\n      onClick(type, value);\r\n    }\r\n    if (evt.type === \"keydown\") {\r\n      let key;\r\n      switch (evt.key) {\r\n        case \"Enter\":\r\n          key = \"=\";\r\n          break;\r\n        case \",\":\r\n          key = \".\";\r\n          break;\r\n        case \"Escape\":\r\n          key = \"clear\";\r\n          break;\r\n        default:\r\n          key = evt.key;\r\n          break;\r\n      }\r\n\r\n      const pressedBtn = buttonsList.find((el) => el.value === key);\r\n      if (pressedBtn) {\r\n        value = pressedBtn.value;\r\n        type = value === \"-\" ? TYPES.ACTION : pressedBtn.type;\r\n\r\n        const el = document.querySelector(\r\n          `[data-type=\"${type}\"][data-value=\"${value}\"]`\r\n        );\r\n        el.classList.add(\"active\");\r\n\r\n        onClick(type, value);\r\n      }\r\n    }\r\n  };\r\n\r\n  const removeClass = (evt) => {\r\n    evt.currentTarget.classList.remove(\"active\");\r\n  };\r\n\r\n  return (\r\n    <ul className=\"buttonsList\">\r\n      {buttonsList.map((el) => (\r\n        <li\r\n          className=\"button-item\"\r\n          key={el.id}\r\n          onClick={handleClick}\r\n          onTransitionEnd={removeClass}\r\n          data-type={el.type}\r\n          data-value={el.value}\r\n        >\r\n          <span>{el.display}</span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import { TYPES, INITIAL_VALUE } from \"../helpers/constants\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst notifyOptions = {\r\n  position: \"bottom-center\",\r\n  style: { width: \"200px\", margin: \"0 auto\" },\r\n};\r\n\r\nconst digit = (value, state) => {\r\n  const { inputNumb, setInputNumb, expression, setExpression } = state;\r\n\r\n  if (!inputNumb.includes(\"%\")) {\r\n    if (inputNumb === \"error\" || expression.equal) {\r\n      setInputNumb(value);\r\n      setExpression(INITIAL_VALUE.expression);\r\n    } else if (checkDigitsLimit(inputNumb, \"total\")) {\r\n      toast.warning(\"only 15 digits can be entered here\", notifyOptions);\r\n    } else if (checkDigitsLimit(inputNumb, TYPES.COMMA)) {\r\n      toast.warning(\r\n        \"only 10 digits after point '.' can be entered here\",\r\n        notifyOptions\r\n      );\r\n    } else {\r\n      setInputNumb((prevState) =>\r\n        prevState === \"0\" ? value : prevState + value\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nconst checkDigitsLimit = (text, type = \"\") => {\r\n  if (type === TYPES.COMMA) {\r\n    return text.includes(\".\") && text.slice(text.indexOf(\".\") + 1).length > 9;\r\n  }\r\n  return text.length > 14;\r\n};\r\n\r\nexport default digit;\r\n","import { INITIAL_VALUE } from \"../helpers/constants\";\r\n\r\nconst comma = (value, state) => {\r\n  const { inputNumb, setInputNumb, expression, setExpression } = state;\r\n\r\n  if (\r\n    inputNumb.length < 14 &&\r\n    !inputNumb.includes(value) &&\r\n    !inputNumb.includes(\"%\")\r\n  ) {\r\n    if (inputNumb === \"error\" || expression.equal) {\r\n      setInputNumb(`0${value}`);\r\n      setExpression(INITIAL_VALUE.expression);\r\n    } else {\r\n      setInputNumb((prevState) => prevState + value);\r\n    }\r\n  }\r\n};\r\n\r\nexport default comma;\r\n","const registr = (value, state) => {\r\n  const { inputNumb, setInputNumb } = state;\r\n\r\n  if (inputNumb.length < 14 && inputNumb !== \"0\" && inputNumb !== \"error\") {\r\n    setInputNumb((prevState) =>\r\n      prevState.includes(value) ? prevState.slice(1) : value + prevState\r\n    );\r\n  }\r\n};\r\n\r\nexport default registr;\r\n","const percent = (value, state) => {\r\n  const { inputNumb, setInputNumb } = state;\r\n\r\n  if (\r\n    inputNumb.length < 14 &&\r\n    inputNumb !== \"error\" &&\r\n    !inputNumb.includes(value)\r\n  ) {\r\n    setInputNumb((prevState) => checkComma(prevState) + value);\r\n  }\r\n};\r\n\r\nconst checkComma = (text) => {\r\n  if (text[text.length - 1] === \".\") {\r\n    return text.slice(0, text.length - 1);\r\n  }\r\n  return text;\r\n};\r\n\r\nexport default percent;\r\n","import { INITIAL_VALUE } from \"../helpers/constants\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst notifyOptions = {\r\n  position: \"bottom-center\",\r\n  style: { width: \"200px\", margin: \"0 auto\" },\r\n};\r\n\r\nconst action = (value, state) => {\r\n  const { inputNumb, setInputNumb, expression, setExpression } = state;\r\n\r\n  if (inputNumb !== \"error\") {\r\n    if (\r\n      (!expression.action && value !== \"=\") ||\r\n      (expression.equal && value !== \"=\")\r\n    ) {\r\n      setExpression({\r\n        numbOne: checkPercentAndComma(inputNumb),\r\n        action: value,\r\n        numbTwo: \"\",\r\n        equal: \"\",\r\n      });\r\n      setInputNumb(\"0\");\r\n    }\r\n    if (expression.numbOne && expression.action && !expression.equal) {\r\n      const tempResult = calculate(\r\n        Number(expression.numbOne),\r\n        expression.action,\r\n        Number(checkPercentAndComma(inputNumb))\r\n      );\r\n      if (tempResult === \"error\") {\r\n        toast.error(\"Division by zero\", notifyOptions);\r\n        setInputNumb(tempResult);\r\n        setExpression(INITIAL_VALUE.expression);\r\n      } else {\r\n        if (value === \"=\") {\r\n          setExpression((prevState) => ({\r\n            ...prevState,\r\n            numbTwo: inputNumb,\r\n            equal: \"=\",\r\n          }));\r\n          setInputNumb(tempResult);\r\n        } else {\r\n          setExpression({\r\n            numbOne: tempResult,\r\n            action: value,\r\n            numbTwo: \"\",\r\n            equal: \"\",\r\n          });\r\n          setInputNumb(\"0\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst calculate = (firstNumber, action, secondNumber) => {\r\n  switch (action) {\r\n    case \"+\":\r\n      return setNumberFormat(firstNumber + secondNumber);\r\n    case \"-\":\r\n      return setNumberFormat(firstNumber - secondNumber);\r\n    case \"*\":\r\n      return setNumberFormat(firstNumber * secondNumber);\r\n    case \"/\":\r\n      return secondNumber !== 0\r\n        ? setNumberFormat(firstNumber / secondNumber)\r\n        : \"error\";\r\n    default:\r\n      return \"error\";\r\n  }\r\n};\r\n\r\nconst checkPercentAndComma = (text) => {\r\n  if (text.includes(\"%\")) {\r\n    return (Number(text.slice(0, text.length - 1)) / 100)\r\n      .toFixed(10)\r\n      .replace(/\\.?0+$/, \"\");\r\n  }\r\n  if (text[text.length - 1] === \".\") {\r\n    return text.slice(0, text.length - 1);\r\n  }\r\n  return text;\r\n};\r\n\r\nconst setNumberFormat = (number) => {\r\n  if (\r\n    number > 1e15 ||\r\n    number < -1e15 ||\r\n    (number > 0 && number < 1e-10) ||\r\n    (number > -1e-10 && number < 0)\r\n  ) {\r\n    return number.toPrecision(10);\r\n  } else {\r\n    return number.toFixed(10).replace(/\\.?0+$/, \"\");\r\n  }\r\n};\r\n\r\nexport default action;\r\n","import { toast } from \"react-toastify\";\r\n\r\nconst notifyOptions = {\r\n  position: \"bottom-center\",\r\n  style: { width: \"200px\", margin: \"0 auto\" },\r\n};\r\n\r\nconst memory = (value, state) => {\r\n  const { inputNumb, setInputNumb, storage, setStorage } = state;\r\n\r\n  if (value === \"memClear\") {\r\n    setStorage(\"\");\r\n  }\r\n\r\n  if (value === \"memMinus\" && inputNumb !== \"error\") {\r\n    setStorage((prevState) =>\r\n      setNumberFormat(Number(prevState) - Number(checkPercent(inputNumb)))\r\n    );\r\n    toast.success(\"Saved\", notifyOptions);\r\n  }\r\n\r\n  if (value === \"memPlus\" && inputNumb !== \"error\") {\r\n    setStorage((prevState) =>\r\n      setNumberFormat(Number(prevState) + Number(checkPercent(inputNumb)))\r\n    );\r\n    toast.success(\"Saved\", notifyOptions);\r\n  }\r\n\r\n  if (value === \"memReturn\") {\r\n    storage === \"\"\r\n      ? toast.info(\"Storage empty\", notifyOptions)\r\n      : setInputNumb(storage);\r\n  }\r\n};\r\n\r\nconst checkPercent = (text) => {\r\n  return text.includes(\"%\")\r\n    ? (Number(text.slice(0, text.length - 1)) / 100)\r\n        .toFixed(10)\r\n        .replace(/\\.?0+$/, \"\")\r\n    : text;\r\n};\r\n\r\nconst setNumberFormat = (number) => {\r\n  if (\r\n    number > 1e15 ||\r\n    number < -1e15 ||\r\n    (number > 0 && number < 1e-10) ||\r\n    (number > -1e-10 && number < 0)\r\n  ) {\r\n    return number.toPrecision(10);\r\n  } else {\r\n    return number.toFixed(10).replace(/\\.?0+$/, \"\");\r\n  }\r\n};\r\n\r\nexport default memory;\r\n","import { useState } from \"react\";\nimport Display from \"./components/Display\";\nimport Buttons from \"./components/Buttons\";\nimport { digit, comma, registr, percent, action, memory } from \"./handlers\";\nimport { TYPES, INITIAL_VALUE } from \"./helpers/constants\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [inputNumb, setInputNumb] = useState(INITIAL_VALUE.inputNumb);\n  const [expression, setExpression] = useState(INITIAL_VALUE.expression);\n  const [storage, setStorage] = useState(INITIAL_VALUE.storage);\n\n  const handleClick = (type, value) => {\n    const state = {\n      inputNumb,\n      setInputNumb,\n      expression,\n      setExpression,\n      storage,\n      setStorage,\n    };\n\n    switch (type) {\n      case TYPES.DIGIT:\n        digit(value, state);\n        break;\n      case TYPES.COMMA:\n        comma(value, state);\n        break;\n      case TYPES.REGISTR:\n        registr(value, state);\n        break;\n      case TYPES.PERCENT:\n        percent(value, state);\n        break;\n      case TYPES.ACTION:\n        action(value, state);\n        break;\n      case TYPES.MEMORY:\n        memory(value, state);\n        break;\n\n      default:\n        reset();\n        break;\n    }\n  };\n\n  const reset = () => {\n    setInputNumb(INITIAL_VALUE.inputNumb);\n    setExpression(INITIAL_VALUE.expression);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <ToastContainer autoClose={3000} />\n      <div className=\"calculator\">\n        <Display inputNumb={inputNumb} expression={expression} />\n        <Buttons onClick={handleClick} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}